<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function($scope, $http, $window, spScUtil, nowAttachmentHandler, spUtil, $log, spAriaUtil, $rootScope, $timeout) {
  


  var c = this;
/*
used for talking widgets
  $scope.showWidget = "";

        //Listening for "showHideWidget" event

  $rootScope.$on('showHideWidget', function(event,data) {

  $timeout(function(){

            $scope.showWidget = data;

  });

  });


	*/
	

	
	// holds value to show/hide description textbox
	c.showDescription = true;
	
	var starValue;
	
	/******************************************************************
	 ************************ BEGIN GLOBAL clickStar ******************
	 ******************************************************************
	 // need ng click to do c.function
	// since not angular this is a global function be careful
	// not good practice. also doesnt need to pass "this" could just 
	   pass the number star it is
	 *****************************************************************/
	clickStar = function(starClicked) {
		
		
		//alert(starClicked.id);
		starValue = starClicked.id[0];
		
		if(starClicked.className == "m-b fa fa-star-o fa-4x  text-warning") {
			starClicked.className = "m-b fa fa-star fa-4x  text-warning";
		}
		else {
			starClicked.className = "m-b fa fa-star-o fa-4x  text-warning";
		}
		
		var parentDivOfStars = document.getElementById("StarRatingView");
		var starNum;
		
		// reference to id based of parent node (parent.childnode[x])
		var x = (starValue * 2) - 1;
	  //alert(starValue);
		//alert(x);
		
		// fill stars with colors <= star value
		while (x > 0) {
			// x denotes star (1 = 1star, 3 = 2star, 5 = 3star, 7 = 4star, 9 = 5star)
			starNum = parentDivOfStars.childNodes[x];
			//alert(starNum.id);
			starNum.className = "m-b fa fa-star fa-4x  text-warning";
			x -= 2;
		}
		
		x = (starValue * 2) + 1;
			// unfill stars > star value
		while (x < 10) {
			starNum = parentDivOfStars.childNodes[x];
			starNum.className = "m-b fa fa-star-o fa-4x  text-warning";
			x += 2;
		}
		c.data.starValue = starValue;
	}
	
	/******************************************************************
	 ************************ END GLOBAL clickStar ********************
	 *****************************************************************/
	
	/******************************************************************
	 ************************ BEGIN submitme *************************
	 *****************************************************************
	 gets called on submit but from HTML
	 All fields are mandatory so return error msg and exit if not all filled
	 Otherwise update course name and call server
	 *****************************************************************/
	c.submitme = function() {
		if(c.courseName.value == undefined || c.data.starValue == undefined || c.data.desc == undefined) {
			spUtil.addErrorMessage('Course, Star Review and description must be filled out to submit.');
			return;
		}
		
		c.data.myCourseName = c.courseName.value;
		c.server.update();	
	}
	/******************************************************************
	 ************************ END submitme ****************************
	 *****************************************************************/
	
	/******************************************************************
	 ************************ BEGIN changeDescription *****************
	 *****************************************************************
	 gets called from textarea in HTML after typing inside textbox and  
	 then leaving the box (update on blur)
	 *****************************************************************/
	c.changeDescription = function() {
			c.data.desc = c.my_description;
	}
	
}]]></client_script>
        <controller_as>c</controller_as>
        <css>/* menu pills vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv///
.each-incident{

display:flex;

  justify-content:space-between;

  align-items:center;

  padding:10px;

  border-top:1px solid #ddd;

  clear:both;

}

.center-div{

  float: none;

  margin-left: auto;

  margin-right: auto;

}
*/
.panel {
 //min-height: 405px;
 max-width: 600px;
}
//////////////////////////////////////////////////

.attachment-list {
  	max-height: 180px;
  	overflow-y: scroll;
  	margin-bottom: 10px;
}

.accordion-toggle {
  	line-height: 13px;
}

textarea {
	resize: vertical;
}

.select2-additional-display-field {
  	padding-right: 5px;
}



div.image {
height: 200px;
width: 400px;
top: 99px;
left: 50px;
background-size: cover;
}

/* border at bottom of tabs 
.nav-tabs {
 	border:none; 
}

/* tab selected background color 
.nav-tabs &gt; li.active &gt; a, .nav-tabs &gt; li.active &gt; a:hover, .nav-tabs &gt; li.active &gt; a:focus {
    color: #555555;
    background-color: #ffffff;
}

/* below is supposed to be a comment -- != comment */
-- ICON LINK CSS BEGIN:--------------------------------------------------------

.iconlink a label,h2 {
  display: block;
  font-size: 2.5rem;
  font-weight: 300;
  line-height: 1.1;
  padding: 0;
  margin: 0 0 10px 0;
}

/* TOP ICON ---------- */

a.top_icon {
  display: block;
  padding: 20px;
  text-align: center;
}

a.top_icon .fa {
  display: block;
  text-align: center;
}

/* CIRCLE ICON ---------- */

a.circle_icon {
  display: block;
  padding: 20px 0px 20px 70px;
  position: relative;
}

a.circle_icon .fa {
  position:absolute;
  left: 0px;
  top: 10px;
}

/* COLOR BOX ---------- */

a.color_box {
  display: block;
  position: relative;
  padding: 20px 20px 20px 82px;
  border-radius: 4px;
  margin-bottom: 20px;
}

a.color_box .fa {
  position:absolute;
  left: 20px;
  top: 20px;
  width:42px;
  text-align: center;
}

.icon-link-background-primary {
  background-color: $brand-primary;
}

.icon-link-background-info {
  background-color: $brand-info;
}

.icon-link-background-success {
  background-color: $brand-success;
}

.icon-link-background-warning {
  background-color: $brand-warning;
}

.icon-link-background-danger {
  background-color: $brand-danger;
}

.icon-link-background-default {
  background-color: $brand-primary;
}

.text-primary {
  color: $brand-primary;
  
  &amp;:hover {
    color: darken($brand-primary, 20%);
  }
}

.text-info {
  color: $brand-info;
  
  &amp;:hover {
    color: darken($brand-info, 20%);
  }
}

.text-success {
  color: $brand-success;
  
  &amp;:hover {
    color: darken($brand-success, 20%);
  }
}

.text-warning {
  color: $brand-warning;
  
  
  &amp;:hover {
    color: darken($brand-warning, 20%);
  }
  
}

.text-danger {
  color: $brand-danger;
  
  &amp;:hover {
    color: darken($brand-danger, 20%);
  }
}

.text-default {
  color: $brand-primary;
  
  &amp;:hover {
    color: darken($brand-primary, 20%);
  }
}
-- ICON LINK CSS END:--------------------------------------------------------











































</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>review-widget-by-fred</id>
        <internal>false</internal>
        <link/>
        <name>Review Widget by Fred</name>
        <option_schema/>
        <public>true</public>
        <roles/>
        <script><![CDATA[(function() {
	
  /******************************************************************
	 ************************ BEGIN submitme **************************
	 ******************************************************************
		This function gets called by server update 
			 in client script function c.readReviews
		------------------------------------------------------
		Queries golf course review table and searches by course name.
		Grabs course name, description, course rating for each review and
		pushes it to requestList which is visible within entire widget.
		Keeps track of average star rating for each review to show an 
		overall course rating.
		
		Queries golf course select for general information to provide with overall review.
	********************************************************************/

if(input && input.action == 'submitme') {
	//gs.addInfoMessage("Please run");
	//gs.addInfoMessage(input.myCourseName);
	//gs.addInfoMessage(input.myCourseName + "1 " + input.desc + " " + input.starValue)
	var gr = new GlideRecord('x_339628_fairfaxco_golf_course_reviews_2');
    gr.initialize(); 
		gr.course_name = input.myCourseName; 
		gr.description = input.desc; 
		gr.course_rating = input.starValue;
		gr.insert();
		gs.addInfoMessage("Review Submitted.");
	return;
	}
	/******************************************************************
	 ************************** END submitme **************************
	 *****************************************************************/
	
	// exerpt from out of box widget
	// curious if we even need this.
	// we can probably just set in client script
	data.action = options.action;
	if (data.action)
		data.item = options.item;
	else
		//data.action = 'checkout';
		data.action = 'submitme';

	
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-05-31 14:21:11</sys_created_on>
        <sys_id>7a1913f84f313300496900fe9310c798</sys_id>
        <sys_mod_count>300</sys_mod_count>
        <sys_name>Review Widget by Fred</sys_name>
        <sys_package display_value="FairfaxCounty" source="x_339628_fairfaxco">b1051ad14f413300496900fe9310c7cc</sys_package>
        <sys_policy/>
        <sys_scope display_value="FairfaxCounty">b1051ad14f413300496900fe9310c7cc</sys_scope>
        <sys_update_name>sp_widget_7a1913f84f313300496900fe9310c798</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-06-28 14:26:30</sys_updated_on>
        <template><![CDATA[<!-- -------------------------------------------------- -->
<!-- ---------------- Tab Information ----------------- -->
<!-- -------------------------------------------------- ---

		A lot of tab stuff not used. Notice there is only 2 tabs.
		"write a review and see all reviews"
-- ---------------------------------------------------- --
  <uib-tabset active="active">
    <uib-tab index="0" heading="Write a Review"></uib-tab>
    <uib-tab index="$index + 1" ng-repeat="tab in tabs" heading="{{tab.title}}" disable="tab.disabled">
      {{tab.content}}
    </uib-tab>
    <uib-tab index="3" select="alertMe()" >
      <uib-tab-heading>
        <i class="glyphicon glyphicon-bell"></i> See all Reviews
      </uib-tab-heading>
      !--I've got an HTML heading, and a select callback. Pretty cool --
    </uib-tab>
  </uib-tabset>
!-- --------------------------------------------------------------------------------- --

<div ng-if="showWidget == 'review-widget-by-fred'">
<div class="container">
-->
	  
<div class="panel panel-default">
	<h1 class="padder-md h3">${Review Golf Courses}
    <span class="text-base">
  	  <i class="fa fa-close pull-right text-base" ng-click="c.cancel()"></i>
     </span>
  </h1>
	<div class="wrapper-md clearfix b-t">
		<div class="form-group">
			<div class="row">
				<div class="col-sm-8">
					<label for="u_course_name">${Select a Course} <i class="fa fa-info-circle" uib-tooltip="${Please select a course, rate your experience and leave a review. Thank you.}" tooltip-placement="right" tooltip-append-to-body="true"></i></label>
					<!-- -------------------------------------------------- -->
  				<!-- ----------- Reference Search Bar ----------------- -->
 				  <!-- -------------------------------------------------- -->
          <sn-record-picker id="u_course_name" 
                            field="c.courseName" 
                            table="'u_golf_courses'" 
                          	display-field="'u_course_name'"
                            value-field="'u_course_name'"
                            page-size="100" >
                            
          </sn-record-picker>
           									<!-- value-field="'sys_id'" -->
          	  <!-- display-field="'u_course_name'" -->
				</div>
       
       
        	<!-- -------------------------------------------------- -->
  				<!-- ----------- Clickable Star Rating ---------------- -->
 				  <!-- -------------------------------------------------- -->
         <!-- use ng if to show star selection keep track of variable 
							using data."mycustomobject" build object in server script?
							or use c. custom boolean variable along with ng click-->
        
      	<div class="padder-v col-sm-12" id="StarRatingView">
          
         	 <div id="1Star" class="m-b fa fa-star-o fa-4x  text-warning" onclick="clickStar(this)"></div>
        	 <div id="2Star" class="m-b fa fa-star-o fa-4x  text-warning" onclick="clickStar(this)"></div>
        	 <div id="3Star" class="m-b fa fa-star-o fa-4x  text-warning" onclick="clickStar(this)"></div>
           <div id="4Star" class="m-b fa fa-star-o fa-4x  text-warning" onclick="clickStar(this)"></div>
        	 <div id="5Star" class="m-b fa fa-star-o fa-4x  text-warning" onclick="clickStar(this)"></div>
         
        </div>
           
					<!-- -------------------------------------------------- -->
  				<!-- ----------- Description Text Box ----------------- -->
 				  <!-- -------------------------------------------------- -->
         <div class="col-sm-12">
					<label for="my-description" ng-click="c.showDescription = !c.showDescription" tabindex="0">${Description} <span class="text-muted"></span>
						<i ng-class="c.showDescription ? 'fa fa-minus-square-o' : 'fa fa-plus-square-o'" aria-expanded="{{c.showDescription}}" class="m-t-xs pull-left accordion-toggle"></i>
					</label>
					<textarea class="form-control" ng-model="c.my_description" id="my-description" ng-model-options="{ updateOn: 'blur' }" ng-if="c.showDescription" ng-change="c.changeDescription()" rows="3"></textarea>
				</div>
        
  </div>       
        
		</div>
     <button name="submit" ng-click="c.submitme()" class="btn sc-btn btn-primary pull-right m-l-xs">
  ${Submit}
  </button>
    </div>
	</div>
<!--  
</div>
</div>
-->]]></template>
    </sp_widget>
</record_update>
